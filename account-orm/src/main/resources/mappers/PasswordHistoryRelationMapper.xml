<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.tony.tonyirl.account.orm.mapper.PasswordHistoryRelationMapper">
  <resultMap id="BaseResultMap" type="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelation">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account_id" jdbcType="BIGINT" property="accountId" />
    <result column="account_password" jdbcType="VARCHAR" property="accountPassword" />
    <result column="encrypt_type" jdbcType="VARCHAR" property="encryptType" typeHandler="me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler" />
    <result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.encryptTypeCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler} and #{criterion.secondValue,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.encryptTypeCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler} and #{criterion.secondValue,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account_id, account_password, encrypt_type, insert_time
  </sql>
  <select id="selectByExample" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from r_password_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null and limit > 0">
      <choose>
        <when test="offset != null and offset > 0">
          limit ${offset}, ${limit}
        </when>
        <otherwise>
          limit ${limit}
        </otherwise>
      </choose>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from r_password_history
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from r_password_history
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelationExample">
    delete from r_password_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelation">
    insert into r_password_history (id, account_id, account_password, 
      encrypt_type, 
      insert_time)
    values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{accountPassword,jdbcType=VARCHAR}, 
      #{encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler}, 
      #{insertTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelation">
    insert into r_password_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="accountId != null">
        account_id,
      </if>
      <if test="accountPassword != null">
        account_password,
      </if>
      <if test="encryptType != null">
        encrypt_type,
      </if>
      <if test="insertTime != null">
        insert_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="accountPassword != null">
        #{accountPassword,jdbcType=VARCHAR},
      </if>
      <if test="encryptType != null">
        #{encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler},
      </if>
      <if test="insertTime != null">
        #{insertTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelationExample" resultType="java.lang.Long">
    select count(*) from r_password_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update r_password_history
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.accountPassword != null">
        account_password = #{record.accountPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.encryptType != null">
        encrypt_type = #{record.encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler},
      </if>
      <if test="record.insertTime != null">
        insert_time = #{record.insertTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update r_password_history
    set id = #{record.id,jdbcType=BIGINT},
      account_id = #{record.accountId,jdbcType=BIGINT},
      account_password = #{record.accountPassword,jdbcType=VARCHAR},
      encrypt_type = #{record.encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler},
      insert_time = #{record.insertTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelation">
    update r_password_history
    <set>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="accountPassword != null">
        account_password = #{accountPassword,jdbcType=VARCHAR},
      </if>
      <if test="encryptType != null">
        encrypt_type = #{encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler},
      </if>
      <if test="insertTime != null">
        insert_time = #{insertTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="me.tony.tonyirl.account.orm.domain.PasswordHistoryRelation">
    update r_password_history
    set account_id = #{accountId,jdbcType=BIGINT},
      account_password = #{accountPassword,jdbcType=VARCHAR},
      encrypt_type = #{encryptType,jdbcType=VARCHAR,typeHandler=me.tony.tonyirl.account.orm.mybatis.typehandler.EncryptTypeEnumTypeHandler},
      insert_time = #{insertTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>